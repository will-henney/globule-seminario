Analysis of the reprojected maps and ratios thereof for m1-67

* Summary of what we have done and what needs to be done

** Focus for Roberto's thesis
- We want to get a better estimate of the knot radii, which is difficult to obtain from the HST H alpha images
- Also, if there is some way from the JWST images to isolate the interaction shells based on the line ratios, rather than simply morphology then that would be great

** What we have done as of now [2024-05-26 Sun]
- Summary of how all the ratios vary between different spatial zones in [[id:333074B1-5DDA-4B69-8160-AA04E6D2C78C][Qualitative analysis of the different ratios]]
- Analysis of relative contributions (lines, UIB, continuum) to the different filters
  - But only possible for the MIRI filters
  - Spitzer IRS for the whole nebula
    - See the various subsections of [[id:8ABE921C-EF8A-443A-8C7D-EEBF4AA6A923][MIRI Imaging]] in [[file:m1-67-globules.org]]
    - [[id:BAFF43C0-68C4-47A1-9407-D85507D04941][Summary table from Spitzer spectra]]
    - [[id:270E26FA-B168-4712-9A28-8C028C2AE4DF][Predictions for behavior of each filter]]
    - [[id:7BA17133-6976-4A86-BF36-D8F8CAAD3587][Predictions for what factors influence the colors]]
    - [[id:D33313A5-52A2-412F-B2AE-BE76DB57CB6E][Detailed inventory of each filter]] 
  - JWST for the little globules near the star
    - The only thing I found was [[id:9F49EDEC-433C-4193-904B-785AF4C0E86F][Conclusions based on the contribution fractions]]
    - We could do more with this, such as getting a better handle on what the color variations are due to 
  - [ ] I need to try and reconcile the two sets of results. They need not give exactly the same since they are studying different regions. In fact the variation between them can be instructive

** TODO Things to do next
:LOGBOOK:
- Note taken on [2024-06-13 Thu 21:10] \\
  Finish with the linear combinations. Now I want to move back to the star masks and the correlation plots. It turned out that subtracting out the stars was not very successful so we will still need to use the masks
- Note taken on [2024-06-11 Tue 13:15] \\
  While working on the star mask, I got the idea of trying to cancel out the stars using combinations of filters. This led to the idea of separately isolateing the 3 components: stars, nebula, globules. And for this, we needed the facility to do general lineqar combinations of multiple filters. This machinery is now in place, but needs testing and then appying seriously. 
- Note taken on [2024-06-04 Tue 13:24] \\
  I am going to work on the star mask next, since that is a pre-requisite for doing good color-color plots
- Note taken on [2024-06-04 Tue 11:10] \\
  I have now done the smoothing. This did not make an enormous difference, but it did successfully eliminate some of the artefacts, such as the ghost tadpoles in some of the MIRI ratios
:END:
- [X] Smoothing of band maps to a common PSF before taking ratios
  - This is something I had asked Roberto to do, but I do not think he ever did it
  - We only need to do this in groups, so we would still maintain the resolution of the longest wavelength filter in each group: f220w, f444w, f1800w
  - This is what we should do first before any other analysis
- [ ] Can we subtract off a synthetic psf?
  - This might be the best way to help Roberto to be honest
- [ ] Write python script to make images of the band maps and the ratios, including the rgb color combination maps that I have been using
- [ ] Do correlation color-color plots for all the band ratios
  - Maybe even separate out the shell and core regions for each knot, as determined from the H alpha HST analysis, and compare with the diffuse emission
  - And also how it varies with distance from the star and between the two sides along the major axis
- [X] See if there are linear combinations of bands that we can use to remove the ionized emission to some extent and leave the pure knots
  - And the same for the stars
    - For instance, the f210m/f150w ratio is almost featureless at 1.6-1.8 in the nebula (ionized gas and neutral globules), but goes down to 0.8-1.0 in the stars (stars are bluer)
    - This means that if we take ~f150w - f210m/1.7~ we should cancel out the nebula and see just the stars
- [ ] Based on the previous, we could make the best possible star mask for each band. If we had a good pure star brightness map at 2.1 microns, then we can smooth it to the resolution of each band and make a bespoke mask, according to star/nebula at that wavelength and that resolution
- Use the different bands to get better positions for the center of each knot
  - Presumably the f335w band would be best
- Plot radial profiles of the bands and ratios for each knot
- Finish the analysis of the MIRI spectra, which seems to have been left 95% done

* Using ratios to diagnose different spatial zones
- The principal zones that we can divide the nebula into are
  1. The stars
  2. The neutral globules
  3. The ionized gas
     - particularly the interaction shells
     - but also the photoevaporation flows from the knots
     - and also the other shells in the outside of the nebula that have different morphologies
  4. The diffuse component that emits at 18 microns
** Qualitative analysis of the different ratios
:PROPERTIES:
:ID:       333074B1-5DDA-4B69-8160-AA04E6D2C78C
:END:
Summary table

| Ratio           |   Stars | Globules |  Ionized | Diffuse |   |
|-----------------+---------+----------+----------+---------+---|
| f150w / f090w   | 2.0-4.0 |  1.3-1.4 |      1.0 | 0.7-0.8 |   |
| f210m / f150w   | 0.8-1.0 |  1.6-1.8 |  1.6-1.8 | 1.0-1.1 |   |
| f335m / f210m   | 0.2-0.3 |  2.0-4.0 |      1.0 | 0.7-0.8 | * |
| f444w / f335m   |     0.8 |  1.0-1.5 |      2.0 | 1.2-1.5 | s |
| f470n / f444w   | 0.8-0.9 |  0.8-0.9 | 0.6-0.65 | 0.8-1.2 |   |
| f777w / f444w   | 0.3-2.0 | 6.0-10.0 |  3.5-4.5 | 4.5-5.0 | * |
| f1130w / f777w  | 0.5-1.0 |  1.0-1.8 |  0.5-1.6 | 1.5-3.5 |   |
| f1280w / f1130w | 0.5-1.0 |  1.5-2.0 |  2.5-6.0 | 1.5-2.0 |   |
| f1800w / f1280w | 0.5-1.0 |  1.8-3.0 |  1.0-2.0 | 4.5-6.0 | * |
|                 |         |          |          |         |   |
*** Short band NIRCAM
- Start with f090w brightness (not strictly a ratio, I know ...)
  - This mainly shows the ionized gas, with the following components
    - The ionization fronts on the knot heads (typical peak of 2 to 5 above background)
    - The interaction shells (typical peak of 1 above the background)
    - The "collars" in between the head and the tail of the knots, as seen in simulations (typical peak of 1 to 1.5)
      - The combination of the collars and the interaction shells can give the illusion of a closed spherical shell
    - [Very weakly] the tails of the knots (peaks of 0.5 or less)
    - [Even weaker] shells and diffuse emission from the outer parts of the nebula (peaks of 0.2 to 1.5).
  - Also shows the stars. Even faint stars have peaks above 10
- f150w/f090w
  - Value about 1.0 in the ionized gas
  - Falls to about 0.7 to 0.8 in diffuse/faint, but noisy
  - Goes up to 1.3 to 1.4 in the neutral globules
    - Has a fan like structure that is not seen in the other ratios, as if it were a shadow cast by the knot heads' ionization front.
    - Decreases to about 1.2 in the knot tails, but extends to larger distances down the tail than the other neutral tracers
  - Goes up to higher than 2 in the stars, so stars are REDDER than nebula
- f210m/f150w
  - Shows very little structure, with typical value of 1.6 to 1.8 in most of the nebula with ionized emission
  - Falls to about 1.0 to 1.1 in the faint zones dominated by diffuse dust
  - Falls to values of 0.8 to 1.0 at the positions of stars, so stars are BLUER than nebula
  - Almost no structure in the globules. Looking at the map you could not say where the ionization front might be
*** Long band NIRCAM
- f335m brightness
  - We see the ionized gas weakly, but the knots much more strongly
- f335m/f210m
  - Value about 1.0 in the ionized gas
  - Falls to about 0.7 to 0.8 in the diffuse/faint zones
  - Goes up to 2 to 4 in the neutral globule heads
    - Falling by a factor of 2 as you go down the tail
    - The peak in the ratio occurs just behind the peak in the f335m brightness (as in, more towards the tail)
    - [X] /ARTEFACT/ We get strange local minima in the ratio at the knot heads, but I wonder if this might just be due to the mismatch in the angular resolution. We see something similar when we divide the f090w by the HST f656n images.
      - I need a version where I smooth to the lowest common denominator before taking the ratio
      - This mainly goes away with the matched psfs
  - Stars have a much lower value of 0.2 to 0.3
- f444w/f335m
  - Value about 2.0 in the ionized gas
  - Falls to about 1.2 to 1.5 in the diffuse/faint zones
  - Drops to about 0.7 in the knot heads, rising back up to about 1.5 as you go down the tail
  - Value is about 0.7-0.8 in the stars
- f470n/f444w
  - Previously discussed in [[id:E6DB5862-941F-494F-883C-7A72C9894BDC][Strange behavior of the f470n filter]]
  - Value of 0.6 to 0.65 in dense ionized gas
  - Peaks of 0.8 to 0.9 in the globule heads
  - Higher values in diffuse faint regions, but that might be zero point issues
  - Also high values of around 1.0 in filamentary shock region around PA 70 and R = 10 to 12 arcsec. This is just outside a region that shows atypical ratios between other MIRI bands
*** Interband ratio
- f777w/f444w
  - Value of about 3.5 to 4.0 in the ionized gas, at least in the interaction shells
    - More like 5 close to the ionization front on the knot's head
    - Also 4.5 to 5 in the diffuse emission in the general nebula
  - Goes up to 10 in the neutral globules
    - Still stays as high as 8, even after going a way down the tail
  - Low value of 0.2 to 1.0 in the stars
  - This ratio is really interesting. It traces very well the outward-facing shocked shells in the outer parts of the nebula. And some in the inner part as well
    - Strangely, they have a low value of this ratio: 3.3 to 4.0, as opposed to the 4.5 to 5.0 in the diffuse ionized emission
    - [ ] I ought to be able to work out what is causing this by looking at the mid-infrared spectra - Spitzer and JWST
*** MIRI band
- General notes on these ratios
  - f1130w/f777w is to a large extent correlated with f1800w/f1280w, at least on the scale of the entire nebula, 
  - f1280w/f1130w seems anti-correlated with these two. Also,  f1280w/f1130w does not have the same lop-sidedeness
  - Note that it is f1130w and f1800w that show the least lopsidedness in their emission. This seems contradictory, need to check later
**** f1130w/f777w
- In the ionized gas shows the shell structure moderately well (in negative), but it is the hexagon-like structure formed by the interactions between the flanks of knots that show up better than the interaction shells in front of the head
  - with values of 0.5 to 1.0 in all these shells
  - As compared with 1.5 in the gaps
- And sometimes as high as 3 to 3.5 in the diffuse/faint regions on the NE axis and northern tropics at larger radii
- Also value of around 1.0 in the  outward-facing shock filaments in the outer parts of the nebula
- Reaches even lower values of 0.5 in outer diffuse ionization front
- /ARTEFACT/ Shows strange tadpole behaviour in the globules, which may be in part due to the mismatch in resolution, but on average the ratio is about 1 to 1.6 in the globules
  - This totally goes away with the matched psfs
- Stars have a range of values from 0.4 (bright stars) to 1.0 (faint stars)
- Clear gradient along the major axis off the nebula (NE to SW) with values of 0.5 to 1.0 in the NE and 1.0 to 1.5 in the SW
  - Average value of 2 on the faint side (NE) versus 1 on the bright side (SW)
**** f1280w/f1130w
- In the ionized gas, shows the shell structure well, more focused towards the frontal interaction shells than is the case for f1130w/f777w
  - with values of 3.0 to 4.0 in the interaction shells
  - As compared with 2.5 to 3.5 in the gap between i-front and shell (there is always a consistent difference of 0.5 between the two ratios)
  - And 2.5 to 3 in the diffuse ionized gas
- In the diffuse/faint regions it falls to 1.5 to 2.0
- Highest values of 5 to 6 are seen in ionized filaments that are not associated with knots
  - Innermost one at (pa-sep) 058-067
  - Another one at 120-300 approx, with a chain of filaments/knots, which look like a jet on the HST H alpha image
  - Also, in the outskirts of the nebula, which I had thought of as ionization fronts but are maybe wind-blown shells
- In the globules, the ratio is about 1.2 to 1.5 in the globule head, gradually climbing in the tails back up to 2.5 to 3.0
**** f1800w/f1280w
- In the ionized gas shows the shell structure very well (in negative), with values of 1.5 to 2.0 in the interaction shells
  - As compared with 2.5 to 3.0 in the gap between i-front and shell
  - And 3 to 3.5 in the diffuse ionized gas
  - [ ] Note that the MIRI ratio shell is on the inner (star-side) edge of the emission shell - we should discuss this somewhere else
- Reaches even lower values of 1.0 to 1.5 in the outwards facing shells in the outer parts of the nebula
- Globules have a value of about 2 and are not very prominent at all.
  - Only the heads are seen at all - the tails are completely invisible in this ratio, suggesting that it is the ionized emission that we are picking up
* Matching resolutions before taking ratios
** JWST NIRCam short
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f150w-radec.fits \
         wr124-jwst-nircam-2022-f090w-radec.fits \
         ratio-f150w-f090w-match-f210m.fits \
         --bg-a 0.22 --bg-b 0.2 \
         --match-psf --debug --match-psf-to jwst-f210m
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 1.50 Filter B = 0.90
: PSF FWHM (pixels): Filter A = 1.6 Filter B = 1.0 Match to = 2.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         wr124-jwst-nircam-2022-f150w-radec.fits \
         ratio-f210m-f150w-match-f210m.fits \
         --bg-a 0.1 --bg-b 0.22 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 2.10 Filter B = 1.50
: PSF FWHM (pixels): Filter A = 2.2 Filter B = 1.6 Match to = 2.2
** JWST NIRCam long
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         ratio-f335m-f210m-match-f470n.fits \
         --bg-a 0.15 --bg-b 0.1\
         --match-psf --debug --match-psf-to jwst-f470n
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 3.35 Filter B = 2.10
: PSF FWHM (pixels): Filter A = 3.6 Filter B = 2.2 Match to = 5.0

This removes some of the artefacts that we were seeing at the globule heads before

Now, check with one that just does the bare minimum of smoothing for this ratio alone
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         ratio-f335m-f210m-match-f335m.fits \
         --bg-a 0.15 --bg-b 0.1\
         --match-psf --debug --match-psf-to jwst-f335m
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 3.35 Filter B = 2.10
: PSF FWHM (pixels): Filter A = 3.6 Filter B = 2.2 Match to = 3.6

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         ratio-f444w-f335m-match-f470n.fits \
         --bg-a 0.2 --bg-b 0.18 \
         --match-psf --debug --match-psf-to jwst-f470n
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 4.44 Filter B = 3.35
: PSF FWHM (pixels): Filter A = 4.7 Filter B = 3.6 Match to = 5.0

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-nircam-2022-f470n-radec.fits \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         ratio-f470n-f444w-match-f470n.fits \
         --bg-a 0.3 --bg-b 0.2 \
         --match-psf --debug --match-psf-to jwst-f470n
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [4.7, 4.44]
: PSF FWHM (pixels): 5.0 4.7 Match to = 5.0
** JWST MIRI
First do MIRI/NIRCAM matched to f1800w and to f770w. This loses a lot of the definition of the shocked shells, which means that some of that was an artefact of the mismatched resolutions. But they are still apparent, especially in the f770w version. The f1800w version is much more diffuse, but that is only necessary for comparing with the longer wave ratios
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-miri-2022-f770w-radec.fits \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         ratio-f770w-f444w-match-f1800w.fits \
         --bg-a 7.0 --bg-b 0.2 \
         --match-psf --debug --match-psf-to jwst-f1800w
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 7.70 Filter B = 4.44
: PSF FWHM (pixels): Filter A = 8.2 Filter B = 4.7 Match to = 19.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-miri-2022-f770w-radec.fits \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         ratio-f770w-f444w-match-f770w.fits \
         --bg-a 7.0 --bg-b 0.2 \
         --match-psf --debug --match-psf-to jwst-f770w
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 7.70 Filter B = 4.44
: PSF FWHM (pixels): Filter A = 8.2 Filter B = 4.7 Match to = 8.2

Then interband of MIRI
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-miri-2022-f1130w-radec.fits \
         wr124-jwst-miri-2022-f770w-radec.fits \
         ratio-f1130w-f770w-match-f1800w.fits \
         --bg-a 23.0 --bg-b 7.0 \
         --match-psf --debug --match-psf-to jwst-f1800w
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 11.30 Filter B = 7.70
: PSF FWHM (pixels): Filter A = 12.0 Filter B = 8.2 Match to = 19.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-miri-2022-f1280w-radec.fits \
         wr124-jwst-miri-2022-f1130w-radec.fits \
         ratio-f1280w-f1130w-match-f1800w.fits \
         --bg-a 26.0 --bg-b 23.0 \
         --match-psf --debug --match-psf-to jwst-f1800w
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 12.80 Filter B = 11.30
: PSF FWHM (pixels): Filter A = 13.6 Filter B = 12.0 Match to = 19.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-ratio.py \
         wr124-jwst-miri-2022-f1800w-radec.fits \
         wr124-jwst-miri-2022-f1280w-radec.fits \
         ratio-f1800w-f1280w-match-f1800w.fits \
         --bg-a 95.0 --bg-b 26.0 \
         --match-psf --debug --match-psf-to jwst-f1800w
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 18.00 Filter B = 12.80
: PSF FWHM (pixels): Filter A = 19.2 Filter B = 13.6 Match to = 19.2
* DONE Is it possible to isolate the three principal emission components?
CLOSED: [2024-06-13 Thu 21:09]
:LOGBOOK:
- Note taken on [2024-06-14 Fri 13:22] \\
  But the alternative neutral map, formed from the three shortest bands does work quite well
- Note taken on [2024-06-14 Fri 13:20] \\
  The diffuse emission cannot be isolated in the NIRCAM bands. It is too faint compared with the systematic variations in the other components
- State "DONE"       from "TODO"       [2024-06-13 Thu 21:09] \\
  This is now done for the NIRCAM filters
:END:
- That is: stars, ionized gas, PAH
  - With a potential fourth component of diffuse warm dust, seen at longer wavelengths
- The idea is to try and find a linear combination of filters that isolates each of these components
- We already found that the ionized gas can be eliminated by taking ~f335m - f210m~, which also puts the stars as negative and the globules as positive
- And we also eliminated the ionized gas and PAH by taking f150w - 0.6 f210m
  - Stars have f335m/f210m = 0.2-0.3
- Make a nice table, normalizing all filters to f210m = 1.0
  | Filter                   | Stars           | Ionized Gas | PAH           | Diffuse        |
  |--------------------------+-----------------+-------------+---------------+----------------|
  | f090w                    | 0.4 +/- 0.15    |        0.57 | 0.45 +/- 0.02 | 1.3 +/- 0.1    |
  | f150w                    | 1.1 +/- 0.1     |         0.6 | 0.6           | 1.0            |
  | f210m                    | 1.0             |         1.0 | 1.0           | 1.0            |
  | f335m                    | 0.25 +/- 0.05   |         1.0 | 3.0 +/- 1.0   | 1.3 +/- 0.1    |
  | f444w                    | 0.19 +/- 0.07   |         2.0 | 2.1 +/- 0.7   | 1.8 +/- 0.2    |
  |--------------------------+-----------------+-------------+---------------+----------------|
  | AA: f150w - 1.05 f090w   | 0.68 +/- 0.19   |      1.5e-3 | 0.13 +/- 0.02 | -0.37 +/- 0.11 |
  | A: f150w - 0.6 f210m     | 0.50 +/- 0.10   |        0.00 | 0.00          | 0.40           |
  | B: f335m - f210m         | -0.75 +/- 0.05  |        0.00 | 2.00 +/- 1.00 | 0.30 +/- 0.10  |
  | C: f444w - 0.7 f335m     | 0.02 +/- 0.08   |        1.30 | 0.00 +/- 0.99 | 0.89 +/- 0.21  |
  | D: 1.5 A + B             | 0.00 +/- 0.16   |        0.00 | 2.00 +/- 1.00 | 0.90 +/- 0.10  |
  | E: C - 0.04 A            | -4e-3 +/- 0.08  |        1.30 | 1e-3 +/- 0.99 | 0.88 +/- 0.21  |
  | F: 1.46 A - AA + 0.065 B | 1.3e-3 +/- 0.24 |     -1.5e-3 | 0.00 +/- 0.07 | 0.97 +/- 0.11  |
  #+TBLFM: @7$2..@7$5=@3-1.05 @2;f2::@8$2..@8$5=@3-0.6 @4;f2::@9$2..@9$5=@5 - @4;f2::@10$2..@10$5=@6 - 0.7 @5;f2::@11$2..@11$5=1.5 @8 + @9;f2::@12$2..@12$5=@6 - 0.7 @5 - 0.04 @3 + 0.025 @4;f2::@13$2..@13$5=1.46 @8 - @7 + 0.065 @9  ;f2
- Try again but with the new estimates from [[id:A54D6D07-9E55-4FE2-BB54-01B20480A8E2][Redo the ratio estimates, taking into account superposition of components]]
  | Filter                  | Stars          | Ionized Gas      | PAH             | Diffuse        |
  |-------------------------+----------------+------------------+-----------------+----------------|
  | f090w                   | 0.4 +/- 0.15   | 0.57 +/- 0.05    | 0.4 +/- 0.3     | 1.3 +/- 0.1    |
  | f150w                   | 1.1 +/- 0.1    | 0.6 +/- 0.05     | 0.6 +/- 0.3     | 1.0            |
  | f210m                   | 1.0            | 1.0              | 1.0             | 1.0            |
  | f335m                   | 0.25 +/- 0.05  | 0.95 +/- 0.15    | 7.0 +/- 0.4     | 1.3 +/- 0.1    |
  | f444w                   | 0.19 +/- 0.07  | 1.9 +/- 0.5      | 3.0 +/- 1.0     | 1.8 +/- 0.2    |
  |-------------------------+----------------+------------------+-----------------+----------------|
  | AA: f150w - 1.05 f090w  | 0.68 +/- 0.19  | 3.6e-4 +/- 0.07  | 0.18 +/- 0.44   | -0.37 +/- 0.11 |
  | A: f150w - 0.6 f210m    | 0.50 +/- 0.10  | 0.00 +/- 0.05    | 0.00 +/- 0.30   | 0.40           |
  | B: f335m - 0.95 f210m   | -0.70 +/- 0.05 | 0.00 +/- 0.15    | 6.05 +/- 0.40   | 0.35 +/- 0.10  |
  | C: f444w - 0.43 f335m   | 0.08 +/- 0.07  | 1.49 +/- 0.50    | -0.01 +/- 1.01  | 1.24 +/- 0.20  |
  | D: 1.4 A + B            | 0.00 +/- 0.15  | 0.00 +/- 0.17    | 6.05 +/- 0.58   | 0.91 +/- 0.10  |
  | E: C - 0.16 A           | 0.00 +/- 0.07  | 1.49 +/- 0.50    | -0.01 +/- 1.01  | 1.18 +/- 0.20  |
  | F: 1.36 A - AA + 0.03 D | -0.02 +/- 0.23 | -3.6e-4 +/- 0.10 | 1.5e-3 +/- 0.60 | 0.92 +/- 0.11  |
  | DD: AA - 1.36 A         | 0.00 +/- 0.23  | 3.6e-4 +/- 0.10  | 0.18 +/- 0.60   | -0.91 +/- 0.11 |
  #+TBLFM: @7$2..@7$5=@3-1.052 @2;f2::@8$2..@8$5=@3-0.6 @4;f2::@9$2..@9$5=@5 - 0.95 @4;f2::@10$2..@10$5=@6 - 0.43 @5;f2::@11$2..@11$5=1.4 @8 + @9;f2::@12$2..@12$5=@10  - 0.16 @8 ;f2::@13$2..@13$5=1.36 @8 - @7 + 0.03 @9  ;f2::@14$2..@14$5=@7 - 1.36 @8 ;f2
- 
- This gives the following "pure" combinations
  - A: stars
  - D: neutral (from f335m excess)
  - E: ionized
  - F: diffuse (/useless/)
  - DD: alternative neutral from f150w excess
- And these ones that include two components
  - AA: stars + neutral
  - B: neutral - stars
  - C: ionized + stars (small amount)
- In reality, A/D/E are also contaminated with diffuse emission, but this will not be very noticeable because the diffuse emission is much weaker than the other components
  - But to get purer combinations, we could combine F with A/D/E to get A'/D'/E'
- It may be that C is good enough to eliminate the stars from the ionized gas as well as the globules, but if not we can try the additional correction to E
  - Although it remains to be seen whether this is too confounded by the different star colors
** Redo the ratio estimates, taking into account superposition of components
:PROPERTIES:
:ID:       A54D6D07-9E55-4FE2-BB54-01B20480A8E2
:END:
- Using the initial estimates, we were over-subtracting the neutral component from the ionized component
- So now try it more carefully, taking full account of local backgrounds
- Use a set of globules in N, where neutral and ionized emission seem well separated on the surface of the globule (at least better than in other cases)
- We use the BG-subtracted and PSF-matched images
- Lateral slice across bright neutral tail
  | Filter |  BG | Tail | Tail - BG | Neutral | Ionized |
  |--------+-----+------+-----------+---------+---------|
  | f090w  | 2.3 |  2.7 |       0.4 |     0.2 |     0.6 |
  | f150w  | 2.2 |  3.5 |       1.3 |     0.7 |     0.6 |
  | f210m  |   4 |    6 |         2 |       1 |       1 |
  | f335m  |   5 |   15 |        10 |       5 |     1.3 |
  | f444w  |  10 |   16 |         6 |       3 |     2.5 |
  #+TBLFM: $4=$3 - $2::$5=$4/@4$4;f1::$6=$2/@4$2;f1
- Try again with one to the south
  | Filter | BG           | Glob | Glob - BG  | Neutral      | Ionized BG   |
  |--------+--------------+------+------------+--------------+--------------|
  | f090w  | [3.2, 3.8]   |  3.9 | [0.7, 0.1] | [0.64, 0.09] | [0.45, 0.54] |
  | f150w  | [4.7, 4.0]   |  5.0 | [0.3, 1.]  | [0.27, 0.91] | [0.66, 0.56] |
  | f210m  | 7.1          |  8.2 | 1.1        | 1.00         | 1.00         |
  | f335m  | [13.4, 12.5] | 20.6 | [7.2, 8.1] | [6.55, 7.36] | [1.89, 1.76] |
  | f444w  | [16.8, 14.5] | 19.1 | [2.3, 4.6] | [2.09, 4.18] | [2.37, 2.04] |
  #+TBLFM: $4=$3 - $2::$5=$4/@4$4;f2::$6=$2/@4$2;f2  
  - We cannot take the "ionized" column seriously, since it is contaminated with globule emission
  - But the "neutral" column is probably a good estimate of the neutral emission. This is very similar to what we had before, but with the exception of the f335m filter, which is higher
- Similar approach with an ionized shell
  | Filter | BG            | Shell          | Shell - BG           | Ionized  norm   | BG norm         |
  |--------+---------------+----------------+----------------------+-----------------+-----------------|
  | f090w  | 1.03 +/- 0.02 | 1.50 +/- 0.02  | 0.47 +/- 0.028284271 | 0.331 +/- 0.021 | 0.701 +/- 0.017 |
  | f150w  | 1.09 +/- 0.02 | 1.63 +/- 0.02  | 0.54 +/- 0.028284271 | 0.380 +/- 0.021 | 0.741 +/- 0.017 |
  | f210m  | 1.47 +/- 0.02 | 2.89  +/- 0.02 | 1.42 +/- 0.028284271 | 1.000 +/- 0.028 | 1.000 +/- 0.019 |
  | f335m  | 1.69 +/- 0.02 | 2.60 +/- 0.02  | 0.91 +/- 0.028284271 | 0.641 +/- 0.024 | 1.150 +/- 0.021 |
  | f444w  | 3.53 +/- 0.05 | 5.49 +/- 0.05  | 1.96 +/- 0.070710678 | 1.380 +/- 0.057 | 2.401 +/- 0.047 |
  #+TBLFM: $4=$3 - $2::$5=$4/@4$4;f3::$6=$2/@4$2;f3
  This seems to show that the shell drops from f210m to f335m, but then increases again in f444w. This is not what I found before, where it was flat or rising. This implies some diversity in the ionized gas spectrum,  which is perhaps due to line emission from different ionization stages (but probably not). Could be explained by an extra line in the f210m filter that is preferentially emitted in the shell
- This is apparent in the ratio map also, which tends to be lower in the interaction shells: 0.95 or so
** Usage instructions for ~find-linear-combo.py~

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py --help
#+end_src

#+RESULTS:
#+begin_example
                                                                                
 Usage: find-linear-combo.py [OPTIONS]                                          
                                                                                
 Find the linear combination of a sequence of fits images after subtracting     
 respective backgrounds                                                         
 Optionally (`--match-psf`) match the PSF of the two images by smoothing the    
 images.  By default, smooth to the largest PSF FWHM of the two images.         
 Optionally, match to a specific filter given on the command line with, for     
 instance, `--match-psf-to jwst-f335m`.                                         
                                                                                
╭─ Options ────────────────────────────────────────────────────────────────────╮
│ --file                              TEXT   Fits file of image to include in  │
│                                            linear combination. Must be used  │
│                                            at least once.                    │
│                                            [default: None]                   │
│ --coeff                             FLOAT  Coefficient of this image in the  │
│                                            linear combination. There must be │
│                                            one --coeff for each --file       │
│                                            argument.                         │
│                                            [default: None]                   │
│ --bg                                FLOAT  Background value for this image.  │
│                                            There must be one --bg for each   │
│                                            --file argument.                  │
│                                            [default: None]                   │
│ --outfile                           TEXT   [default: linear-combo.fits]      │
│ --match-psf       --no-match-psf           [default: no-match-psf]           │
│ --match-psf-to                      TEXT   [default: None]                   │
│ --debug           --no-debug               [default: no-debug]               │
│ --help                                     Show this message and exit.       │
╰──────────────────────────────────────────────────────────────────────────────╯

#+end_example

#+RESULTS:

** Try out the linear combinations

*** Combo D - neutral (PAH)
- 1.4 A + B
- 1.4 (f150w - 0.6 f210m) + (f335m - 0.95 f210m) = 1.4 f150w + f335m - 1.79 f210m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff 1.4 --bg 0.22 \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff -1.79 --bg 0.1 \
         --file wr124-jwst-nircam-2022-f335m-radec.fits --coeff 1.0 --bg 0.18 \
         --outfile combo-D-neutral.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [1.5, 2.1, 3.35]
: PSF FWHM (pixels): 1.6 2.2 3.6 Match to = 4.7
: Extra smoothing (pixels): [4.4485567349347654, 4.164367504406718, 3.101945933507174]


*** Combo DD - neutral (continuum)
- AA - 1.36 A 
- (f150w - 1.05 f090w) - 1.36 (f150w - 0.6 f210m) = -0.36 f150w - 1.05 f090w + 0.816 f210m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f090w-radec.fits --coeff -1.05 --bg 0.2 \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff -0.36 --bg 0.22 \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff  0.816 --bg 0.1 \
         --outfile combo-DD-neutral.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [0.9, 1.5, 2.1]
: PSF FWHM (pixels): 1.0 1.6 2.2 Match to = 4.7
: Extra smoothing (pixels): [4.6283320140251405, 4.4485567349347654, 4.164367504406718]

- This works fine, although there are still residuals from the stars
- It works better in the N and S groupings, whereas in the E grouping we see residual ionized emission at the 10% level
- In general, it correlates well with the D neutral emission from the 3.3 micron PAH band

*** Combo A - stars
- f150w - 0.6 f210m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff 1.0 --bg 0.22 \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff -0.6 --bg 0.1 \
         --outfile combo-A-stars.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [1.5, 2.1]
: PSF FWHM (pixels): 1.6 2.2 Match to = 4.7
: Extra smoothing (pixels): [4.4485567349347654, 4.164367504406718]

*** Combo AA - stars + neutral (continuum)
- f150w - 1.05 f090w
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f090w-radec.fits --coeff -1.05 --bg 0.2 \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff 1.0 --bg 0.22 \
         --outfile combo-AA-neutral.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [0.9, 1.5]
: PSF FWHM (pixels): 1.0 1.6 Match to = 4.7
: Extra smoothing (pixels): [4.6283320140251405, 4.4485567349347654]

*** Combo C - ionized (with star residuals)
- f444w - 0.43 f335m 
- Originally I had f444w - 0.7 f335m but that causes clear over-subtraction of the globules
  - So the problem is that the ionized emission is more extended, so the globule peaks have ionized emission too
  - This means that for the ratios, we need to consider subtracting the background
  - And even that is not necessarily enough, since there is ionized emission from the skin of the globules, which is hard to spatially separate
- After re-measuring the ratios more carefully in [[id:A54D6D07-9E55-4FE2-BB54-01B20480A8E2][Redo the ratio estimates, taking into account superposition of components]] I find a coefficient of 0.43, which seems to work well
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f444w-radec.fits --coeff 1.0 --bg 0.2 \
         --file wr124-jwst-nircam-2022-f335m-radec.fits --coeff -0.43 --bg 0.18 \
         --outfile combo-C-ionized.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [4.44, 3.35]
: PSF FWHM (pixels): 4.7 3.6 Match to = 4.7
: Extra smoothing (pixels): [0.0, 3.101945933507174]

*** Combo E - ionized improved
- C - 0.16 A
- f444w - 0.43 f335m - 0.16 (f150w - 0.6 f210m) = f444w - 0.43 f335m - 0.16 f150w + 0.096 f210m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f444w-radec.fits --coeff 1.0 --bg 0.2 \
         --file wr124-jwst-nircam-2022-f335m-radec.fits --coeff -0.43 --bg 0.18 \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff -0.16 --bg 0.22 \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff 0.096 --bg 0.1 \
         --outfile combo-E-ionized.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [4.44, 3.35, 1.5, 2.1]
: PSF FWHM (pixels): 4.7 3.6 1.6 2.2 Match to = 4.7
: Extra smoothing (pixels): [0.0, 3.101945933507174, 4.4485567349347654, 4.164367504406718]

*** Combo F - diffuse
- 1.36 A - AA + 0.03 D
- 1.36 (f150w - 0.6 f210m) - (f150w - 1.05 f090w) + 0.03 (1.4 f150w + f335m - 1.79 f210m)
- = 1.05 f090w + 0.402 f150w - 0.8697 f210m  + 0.03 f335m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f090w-radec.fits --coeff 1.05 --bg 0.2 \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff 0.402 --bg 0.22 \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff -0.8697 --bg 0.1 \
         --file wr124-jwst-nircam-2022-f335m-radec.fits --coeff 0.03 --bg 0.18 \
         --outfile combo-F-diffuse.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [0.9, 1.5, 2.1, 3.35]
: PSF FWHM (pixels): 1.0 1.6 2.2 3.6 Match to = 4.7
: Extra smoothing (pixels): [4.6283320140251405, 4.4485567349347654, 4.164367504406718, 3.101945933507174]
- This one does not show anything useful
- The negative bits are the most interesting, but they are just the ionization fronts on the neutral globules mainly

*** Individual filters with bg subtraction and matched psf
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f090w-radec.fits --coeff 1.0 --bg 0.2 \
         --outfile pure-f090w-psf-f444w.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [0.9]
: PSF FWHM (pixels): 1.0 Match to = 4.7
: Extra smoothing (pixels): [4.6283320140251405]



#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f150w-radec.fits --coeff 1.0 --bg 0.22 \
         --outfile pure-f150w-psf-f444w.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [1.5]
: PSF FWHM (pixels): 1.6 Match to = 4.7
: Extra smoothing (pixels): [4.4485567349347654]

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f210m-radec.fits --coeff 1.0 --bg 0.1 \
         --outfile pure-f210m-psf-f444w.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [2.1]
: PSF FWHM (pixels): 2.2 Match to = 4.7
: Extra smoothing (pixels): [4.164367504406718]

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f335m-radec.fits --coeff 1.0 --bg 0.18 \
         --outfile pure-f335m-psf-f444w.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [3.35]
: PSF FWHM (pixels): 3.6 Match to = 4.7
: Extra smoothing (pixels): [3.101945933507174]

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-linear-combo.py \
         --file wr124-jwst-nircam-2022-f444w-radec.fits --coeff 1.0 --bg 0.2 \
         --outfile pure-f444w-psf-f444w.fits \
         --match-psf --match-psf-to jwst-f444w --debug
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [4.44]
: PSF FWHM (pixels): 4.7 Match to = 4.7
: Extra smoothing (pixels): [0.0]

* Subtracting the PSF of the bright stars
- We will use webbpsf for this
- It might be easier to go back to the original data arrays, before the astrometric alignment and regridding
- Proposed strategy
  - The bright stars can be found by a simple threshold criterion
    - f090w > 7 will get only stars
    - The brightest bits of nebula are about 5 or 6, so we cannot go much fainter than this;oi
  - So we can find all these stars easily enough, we can sort them in order of brightness, and then go fitting the psf to each of them
  - Fainter stars could be found using blob detection methods, such as ~skimage.feature.blob_log()~, which uses Laplacian of Gaussian method
  - There is also the ~skimage.feature.peak_local_max()~ method, which is much simpler. However, I am not sure if it would work for our case
  - Also of interest is ~skimage.restoration.rolling_ball()~ method, which is used for background subtraction
- On the other hand, the priority is using webbpsf to subtract the psf of the brightest stars
  - For this, we could maybe use a very high threshold and high sigma with my existing [[file:scripts/find-sources.py]] script, which uses ~photutils.detection.DAOStarFinder~
  - Except I am wondering if we need to first fill in the holes in the saturated cores of the bright stars
  - In the original fits file, these have NaN values for the ~VAR_POISSON~ extension and similar.
  - They also have zero in the weight map, so if we directly use that weight when fitting the psf, then we should be ok
- I need to fire up a notebook to investigate some of these ideas

#+begin_src python
      import webbpsf
#+end_src

#+RESULTS:
: None

Try and find bigger brighter stars 
#+begin_src sh :dir data :results verbatim
  f=wr124-jwst-nircam-2022-f090w_BGSUB.fits
  python ../scripts/find-sources.py $f 5.0 1000
#+end_src

#+RESULTS:
: Source list saved to wr124-jwst-nircam-2022-f090w_BGSUB-sources-fwhm5.0-thresh1000.ecsv
: Region file saved to wr124-jwst-nircam-2022-f090w_BGSUB-sources-fwhm5.0-thresh1000.reg

This did not work very well. It filed to find any of the saturated stars

** Plan for removing stars
- [2024-06-28 Fri]
*** Bright central stars
- For the outer parts of the nebula I planned to use the webbpsf theoretical psf, but to allow for arbitrary geometric distortion with the PC matrix
- And also to allow extra smoothing with a Gaussian kernel
- So we have 8 parameters to fit for the star
  - x, y, flux, PC_11, PC_12, PC_21, PC_22, sigma
- This looks like it could work, but we my have to fit the diffraction spikes individually, or at least a separate version for the hexagonal spikes and the left-right spikes
- The rotation in the ~OVERDIST~ and ~DET_DIST~ extensions does match up pretty well with the observed psf, so I am not sure whether further distortions would help or not
- There are slight differences in the relative brightnesses of the primary and secondary peaks in the transverse profile of the diffraction spikes. Some of this might be accounted for by variations in the position of the star on the detector
  - But I also need to look into the sensitivity to the spectrum of the star.
  - It turns out to make very little difference. There re some tiny changes, but it is much less than the variation with position on the detector
*** Medium stars
*** Faint stars


** Taking stock [2024-06-27 Thu] and possible paths
- Looking at ~photutils.psf~ it seems that it has a large fraction of the functionality I want already built
  - But I am not sure whether it would be that easy for me to adapt to its way of working
  - So I am still tending towards implementing my own version using lmfit, although I am no longer so convinced that this is the right approach
- I also read a very good STScI report on fitting the WFC3 psf, which showed me lots of issues  that I hadn't considered
  - Anderson:2016a
    - Instrument Science Report WFC3 2016-12
    - Empirical Models for the WFC3/IR PSF
    - Jay Anderson, Mar 17, 2016
    - https://ui.adsabs.harvard.edu/abs/2016wfc..rept...12A
  - Terminology (see also intro to [[https://photutils.readthedocs.io/en/stable/psf.html][~photutils.psf~ docs]])
    - PSF point spread function (just the optical part)
      - Anderson calls it the "instrumental" PSF
    - PRF point response function (includes the detector)
      - also known as ePSF (effective PSF) - not to be confused with empirical PSF!
      - ePSF includes the integration over the pixel area, but is still a continuos 2d function of displacement from the center.
  - Variation over the field of view is pretty significant, so you never get better than a few percent accuracy
  - There is the likelihood of "pixel-phase bias" in determining the centroids, and hence the psf itself
  - This can be mitigated by dithering, but then you need to have well-determined forward and reverse transformations from the detector to the sky frame (geometrical distortion)
  - He uses a 4x4 oversampling of the detector pixels, but then with a cubic interpolation on that oversampled grid
    - That is sufficient oversampling to represent the sharp features in the psf, but then the cubic interpolation imposes smoothness at smaller scales and gives more accuracy
    - I suppose that I can get this automatically by using cubic interpolation when I do the ~reproject~ step
  - Also, he only tries to reconstruct the core of the PSF (25 x 25 detector pixels)
    - He only uses unsaturated stars and argues that the diffraction spikes that dominate the outer PSF wings are affected by geometrical distortions, which vary too much over the field of view

** Using an empirical psf
- This is working much better, although it is hard to get more than about 3% accuracy, which means you get residuals that are 33 times fainter than the stars, but that is still bright compared to the nebula
- So far I have been putting everything in the notebook [[file:psf-notebooks/psf-experiments.ipynb]]
- Set up parallel python and ipynb versions
  #+begin_src sh :dir psf-notebooks :results output verbatim
    jupytext --set-formats 'ipynb,py:light' *.ipynb *.py
  #+end_src

  #+RESULTS:
  #+begin_example
  [jupytext] Reading psf-experiments.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading psf-experiments.py
  [jupytext] Updating the timestamp of psf-experiments.py
  [jupytext] Reading psf-fitting.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Updating psf-fitting.ipynb
  [jupytext] Updating psf-fitting.py
  [jupytext] Reading psf-experiments.py in format py
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading psf-experiments.ipynb
  [jupytext] Updating the timestamp of psf-experiments.py
  #+end_example

- Keep them in sync
  #+begin_src sh :dir psf-notebooks :results output verbatim
    jupytext --show-changes --update --sync *.py
    printf "\nLast run: $(date)\n"
  #+end_src

  #+RESULTS:
  : [jupytext] Reading psf-experiments.py in format py
  : [jupytext] Loading psf-experiments.ipynb
  : [jupytext] Updating the timestamp of psf-experiments.py
  : [jupytext] Reading psf-fitting.py in format py
  : [jupytext] Loading psf-fitting.ipynb
  : [jupytext] Updating the timestamp of psf-fitting.py
  : 
  : Last run: Thu Jul  4 13:47:55 CST 2024

** Technical details of the PSF and dithering
- Is it worth fitting the psf in the dithered images, or is this just going to cause headaches?
- Note that there is an example of psf subtraction
  - https://webbpsf.readthedocs.io/en/latest/jwst_psf_subtraction.html
  - This uses the earlier stage 2 files it seems
- I have checked the data that we are using, and I do not have those files, although I do have a list of what they are in [[file:../../../Work/WR124-JWST/MAST_2023-09-13T2208/JWST/jw02730-o001_t013_nircam_clear-f090w/jw02730-o001_20230818t225920_image3_00004_asn.json][this json file]]
- For example ~jw02730001001_02103_00007_nrcb2_cal.fits~, which is the stage 2 file for the B2 detector from pointing 7
*** Stage 2 versus stage 3 files
- I have been using the stage 3 files, which have been dithered to the tangent sky plane and regridded
- But we also have the individual detector coordinates (2048 x 2048 pixels for each of 5 detectors in each of 2 modules, A and B)
  - There is a slight rotation of about 1 degree, and also other distortions such as shear. 
- These are dithered by offsets in the "aperture ideal coordinate system", which is
  : All pointing offsets are relative to the selected aperture's reference position in that aperture's ideal coordinate frame (X, Y). All NIRCam apertures are nearly aligned (to ~1° of rotation) with both the JWST coordinate system (V2, V3) and all detector rows and columns.
  #+begin_example
           Instrument configuration information                                    
                                                                                    
    INSTRUME= 'NIRCAM  '           / Instrument used to acquire the data            
    DETECTOR= 'MULTIPLE'           / Name of detector used to acquire the data      
    MODULE  = 'B       '           / NIRCam module: A, B, or MULTIPLE               
    CHANNEL = 'SHORT   '           / Instrument channel                             
    FILTER  = 'F090W   '           / Name of the filter element used                
    PUPIL   = 'CLEAR   '           / Name of the pupil element used                 
    PILIN   =                    F / Pupil imaging lens in the optical path?        
    OPMODE  = 'NONE    '           / Lamp operating mode                            
                                                        
            Dither information                                                      
                                                                                    
    PATTTYPE= 'INTRAMODULEBOX'     / Primary dither pattern type                    
    PRIDTYPE= '8       '           / Primary dither points and packing              
    PRIDTPTS=                    8 / Number of points in primary dither pattern     
    PATT_NUM=                    7 / Position number within dither pattern          
    NUMDTHPT=                    8 / Total number of points in pattern              
    SUBPXPTS=                    1 / Number of points in subpixel dither pattern    
    SUBPXPAT= 'STANDARD'           / Subpixel dither pattern type                   
    XOFFSET =   -8.700026083716704 / x offset from pattern starting position        
    YOFFSET =    -9.29999953296428 / y offset from pattern starting position        
                                                                                    
            Aperture information                                                    
                                                                                    
    APERNAME= 'NRCB2_FULL'         / PRD science aperture used                      
    PPS_APER= 'NRCBS_FULL'         / original AperName supplied by PPS    
  #+end_example
- These are the offsets for this pattern, where we only use the first 8 I think
|  1 | -2.9 | -3.1 |
|  2 | -3.1 |  2.9 |
|  3 |  2.9 |  3.1 |
|  4 |  3.1 | -2.9 |
|  5 |  3.3 | -8.9 |
|  6 | -2.7 | -9.1 |
|  7 | -8.7 | -9.3 |
|  8 | -8.9 | -3.3 |
|  9 | -9.1 |  2.7 |
| 10 | -9.3 |  8.7 |
| 11 | -3.3 |  8.9 |
| 12 |  2.7 |  9.1 |
| 13 |  8.7 |  9.3 |
| 14 |  8.9 |  3.3 |
| 15 |  9.1 | -2.7 |
| 16 |  9.3 | -8.7 |
  They are in arcsec, so it is about 200 pixels for most of the relative offsets
- The relative positions of the apertures are given in tables on [[https://jwst-docs.stsci.edu/jwst-near-infrared-camera/nircam-operations/nircam-apertures#gsc.tab=0][this page]]
  - We are using the Bs compound aperture, which combines all 5 detectors in module B
*** Detector effects: Charge diffusion and inter-pixel capacitance (IPC)
- This is included by default, but only in the ~OVERDIST~ and ~DET_DIST~ extensions
- Whereas the ~OVERSAMP~ and ~DET_SAMP~ extensions "ideal" diffractive psfs
- For the charge diffusion, they use a gaussian convolution with a width that varies with detector
  - NIRCAM short has 0.0062 arcsec or 0.2 pixels

* TODO Test npyaml.py

#+begin_src sh :dir scripts :results verbatim
        python npyaml.py
#+end_src

#+RESULTS:
#+begin_example
ndarray:
- 1
- 2
- 3

2-d ndarray:
- - 0
  - 1
  - 2
- - 3
  - 4
  - 5
- - 6
  - 7
  - 8

{inline 2-d ndarray: [[0, 1, 2], [3, 4, 5], [6, 7, 8]]}

scalar int ndarray: 1

scalar float ndarray: 1.0

np.int64: 1

np.float64: 1.0

masked array:
- 1
- null
- 3

#+end_example

But what happens if we use ~safe_dump~ instead of ~dump~? And with normal numpy arrays, without any special representers.

It turns out that we get an error, because the numpy arrays are not serializable by default. So my custom representers are needed.

#+begin_src python :results output verbatim
  import numpy as np
  import yaml

  a = np.arange(3)
  print(yaml.dump({"yaml.dump() np.ndarray": a}))
  print(yaml.safe_dump({"yaml.safe_dump() np.ndarray": a}))

#+end_src

#+RESULTS:
#+begin_example
yaml.dump() np.ndarray: !!python/object/apply:numpy.core.multiarray._reconstruct
  args:
  - !!python/name:numpy.ndarray ''
  - !!python/tuple
    - 0
  - !!binary |
    Yg==
  state: !!python/tuple
  - 1
  - !!python/tuple
    - 3
  - !!python/object/apply:numpy.dtype
    args:
    - i8
    - false
    - true
    state: !!python/tuple
    - 3
    - <
    - null
    - null
    - null
    - -1
    - -1
    - 0
  - false
  - !!binary |
    AAAAAAAAAAABAAAAAAAAAAIAAAAAAAAA

#+end_example

* Making star masks
:LOGBOOK:
- Note taken on [2024-06-05 Wed 21:39] \\
  Doing this as a pre-requisite for making the ratio maps and color-color diagrams.
:END:
** An image that isolates the stars
- We could either try and do this with a combination of JWST bands
- Or we could do it by spatial filtering
- Or both
*** Band combinations to isolate stars
- We want this at the highest resolution since it is the short bands that are most affected by the stars
- We can make a program similar to file:scripts/find-ratio.py, but that instead takes difference between one map and scaled version of another
  - [X] First we refactor to move all the common worto a library file [[file:scripts/wrutils.py]]
  - [X] Then test that the ratio program still works
  - [X] Then we make a new program that does the subtraction
- Particular cases
  - Short wavelengths - f150w - 0.6 * f210m
    - This does a reasonable job of isolating even the faint stars, at a contour of 0.25, which would be a good threshold for the mask to use at the short wavelengths
  - /FAIL/ Mid wavelengths - f335m - XXX * f444w
    - Ratio f444w / f335m bottoms out at about 0.5 in the stars, but is about 2 in the nebula and > 0.6 in the globules
    - So this suggests f335m - 0.5 * f444w would work
    - Except that would show the globules as well, so no good
    - We need a ratio where globules >= nebula > stars
  - /TRY AGAIN/ Mid wavelengths - f210m - 1.0 * f335m
    - Ratio f335m/f210m in globules > 2, nebula = 1, stars < 0.3
    - This is just what we need with a factor of unity. Should give globules as negative and stars as positive
    - Although possibly better to do it the other way round: f335m - f210m, so that the globules are positive and the stars are negative
**** Short wavelengths - f150w - 0.6 * f210m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-nircam-2022-f150w-radec.fits \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         stars-only-f150w-diff-0_6-f210m.fits \
         --scale-b 0.6 \
         --bg-a 0.22 --bg-b 0.1 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 1.50 Filter B = 2.10
: PSF FWHM (pixels): Filter A = 1.6 Filter B = 2.2 Match to = 2.2

That seems to have worked, up to a point
**** Mid wavelengths - f210m - 1.0 * f335m
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         stars-only-f210m-diff-f335m.fits \
         --scale-b 1.0 \
         --bg-a 0.1 --bg-b 0.15 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 2.10 Filter B = 3.35
: PSF FWHM (pixels): Filter A = 2.2 Filter B = 3.6 Match to = 3.6

And do the same but the other way around, so that the globules are positive and the stars are negative
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         wr124-jwst-nircam-2022-f210m-radec.fits \
         globules-only-f335m-diff-f210m.fits \
         --scale-b 1.0 \
         --bg-a 0.15 --bg-b 0.1 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 3.35 Filter B = 2.10
: PSF FWHM (pixels): Filter A = 3.6 Filter B = 2.2 Match to = 3.6
**** Long wavelengths for globule
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-miri-2022-f770w-radec.fits \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         globules-only-f770w-diff-4_0-f444w.fits \
         --scale-b 4.0 \
         --bg-a 7.0 --bg-b 0.2 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 7.70 Filter B = 4.44
: PSF FWHM (pixels): Filter A = 8.2 Filter B = 4.7 Match to = 8.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-miri-2022-f770w-radec.fits \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         globules-only-f770w-diff-3_5-f444w.fits \
         --scale-b 3.5 \
         --bg-a 7.0 --bg-b 0.2 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 7.70 Filter B = 4.44
: PSF FWHM (pixels): Filter A = 8.2 Filter B = 4.7 Match to = 8.2
**** Shortest wavelengths for globule
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-nircam-2022-f150w-radec.fits \
         wr124-jwst-nircam-2022-f090w-radec.fits \
         globules-only-f150w-diff-1_05-f090w.fits \
         --scale-b 1.05 \
         --bg-a 0.22 --bg-b 0.2 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: Filter A = 1.50 Filter B = 0.90
: PSF FWHM (pixels): Filter A = 1.6 Filter B = 1.0 Match to = 1.6
**** Mid wavelength for shells
Subtract f335m from f444w to get the ionized gas in positive and the globules in negative
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-nircam-2022-f444w-radec.fits \
         wr124-jwst-nircam-2022-f335m-radec.fits \
         shells-only-f444w-diff-f335m.fits \
         --scale-b 1.0 \
         --bg-a 0.2 --bg-b 0.18 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [4.44, 3.35]
: PSF FWHM (pixels): 4.7 3.6 Match to = 4.7

**** Long wavelength for shells
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-miri-2022-f1280w-radec./fits \
         wr124-jwst-miri-2022-f1130w-radec.fits \
         shells-only-f1280w-diff-2_0-f1130w.fits \
         --scale-b 2.0 \
         --bg-a 26 --bg-b 23 \
         --match-psf --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [12.8, 11.3]
: PSF FWHM (pixels): 13.6 12.0 Match to = 13.6

**** Long wavelength for diffuse
f1800w - 2 * f1280w should eliminate ionized emission
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-miri-2022-f1800w-radec.fits \
         wr124-jwst-miri-2022-f1280w-radec.fits \
         diffuse-only-f1800w-diff-2_0-f1280w.fits \
         --scale-b 2.0 \
         --bg-a 95 --bg-b 26 \
         --match-psf \
         --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [18.0, 12.8]
: PSF FWHM (pixels): 19.2 13.6 Match to = 19.2

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-scaled-difference.py \
         wr124-jwst-miri-2022-f1800w-radec.fits \
         wr124-jwst-miri-2022-f1280w-radec.fits \
         diffuse-only-f1800w-diff-1_0-f1280w.fits \
         --scale-b 1.0 \
         --bg-a 95 --bg-b 26 \
         --match-psf \
         --debug 
#+end_src

#+RESULTS:
: Pixel scale: 0.0310 arcseconds
: Wavelengths: [18.0, 12.8]
: PSF FWHM (pixels): 19.2 13.6 Match to = 19.2

* TODO Finding the knot positions and sizes on the different images
:LOGBOOK:
- State "TODO"       from              [2024-07-29 Mon 21:46] \\
  This is the last thing that I need to do to help Roberto find the i-front radii of the knots
:END:

- We will adapt code from the notebook [[file:m1_67_globules_hst.py]] to extract an image around each knot and find the centroid position
- Then we can try various approaches to determining the radios of the ionization front:
  - We can look at the offset between the peak of the ionied emission nd the neutral emission.
  - Or we can look at the width of the neutral peak (but Roberto is going to do that)
- Plan of action
  1. [X] Save the coordinates of the knots in a region file
  2. [X] Save coordinates and photometry in an ECSV file
  3. [-] Compare pairs of images: dx, dy versus x, y to look for radial offsets
     - for the ionized/neutral offset and also for the proper motions
  4. [ ] Measure the knot sizes by fitting 2d elliptical gaussians

** Run the [[file:scripts/find-knot-cores.py][find-knot-cores.py]] script for different images
- We have to find a good way of identifying the coordinates of the peak
  - We can take the peak pixel, but this suffers from discretization
  - We can take the flux-weighted average, but this is biased towards the position of the original masked core region (which is particularly bad for the neutral image, since we are hoping those peaks are displaced)
  - So we will do a two step process - first find the peak pixel, then move the masked region to be centered on the peak before taking the flux-weighted average position (barycenter)
  - And we will also use the star image to mask out star-dominated pixels
  - Another possibility would be to fit a Gaussian, which we might try later
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-knot-cores.py \
         combo-D-neutral.fits 
#+end_src

#+RESULTS:
: Saved barycenters to combo-D-neutral-knot-coords.reg
: Saved coordinates and fluxes to combo-D-neutral-knot-fluxes.ecsv

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-knot-cores.py \
         combo-E-ionized.fits 
#+end_src

#+RESULTS:
: Saved barycenters to combo-E-ionized-knot-coords.reg
: Saved coordinates and fluxes to combo-E-ionized-knot-fluxes.ecsv

These show a clear pattern of radial offset between ionized and neutral

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-knot-cores.py \
         wr124-hst-1997-f656n-radec.fits 
#+end_src

#+RESULTS:
: Saved barycenters to wr124-hst-1997-f656n-radec-knot-coords.reg
: Saved coordinates and fluxes to wr124-hst-1997-f656n-radec-knot-fluxes.ecsv

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/find-knot-cores.py \
         wr124-hst-2008-f656n-radec.fits 
#+end_src

#+RESULTS:
: Saved barycenters to wr124-hst-2008-f656n-radec-knot-coords.reg
: Saved coordinates and fluxes to wr124-hst-2008-f656n-radec-knot-fluxes.ecsv

These show some evidence for radial expansion in the proper motions, but the signal is weak

** Compare the positions of the knots in the different images
This uses the [[file:scripts/compare-knot-positions.py][compare-knot-positions.py]] script
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/compare-knot-positions.py combo-E-ionized combo-D-neutral
#+end_src

#+RESULTS:
: Saved plot to combo-E-ionized-combo-D-neutral-knot-offsets.pdf

This shows a clear positive correlation in x-dx and y-dy, which is consistent with a radial displacement. The cross-correlations x-dy and y-dx are flat.

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/compare-knot-positions.py wr124-hst-1997-f656n-radec wr124-hst-2008-f656n-radec --xyshift1 -0.03 0.0
#+end_src

#+RESULTS:
: Saved plot to wr124-hst-1997-f656n-radec-wr124-hst-2008-f656n-radec-knot-offsets.pdf

 There is very slight evidence of an x-dx positive correlation, but also an offset in x that I had to correct

 
#+begin_src sh :dir data/reproject :results verbatim 
  python ../../scripts/compare-knot-positions.py wr124-hst-2008-f656n-radec combo-E-ionized --xyshift1 -0.06 0.0
#+end_src

#+RESULTS:
: Saved plot to wr124-hst-2008-f656n-radec-combo-E-ionized-knot-offsets.pdf

- Originally this shows a clear net displacement in dx of about -0.06 arcsec, which must be an alignment problem between hst and jwst. Apart from that, everything looks approximately flat. Not much evidence of proper motion, but we will see with the radii
- [2024-08-14 Wed] Now we have an option to introduce a global shift between the two images. The idea is to experiment with adjusting this shift using with this program until all the correlations are flat. And then use the same shift for the radia separations program (see next section)


** Compare the separations of the knots
This uses the [[file:scripts/compare-knot-seps.py][compare-knot-seps.py]] script
*** Ionized versus neutral
#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/compare-knot-seps.py combo-E-ionized combo-D-neutral
#+end_src

#+RESULTS:
: Saved plot to combo-E-ionized-combo-D-neutral-knot-seps.pdf
: Saved data to combo-E-ionized-combo-D-neutral-knot-seps.ecsv

This shows that the separation is typically 0.1 arcsec, with no clear trend with radius

Next thing to do is compare with the knot sizes
*** HST 1997 versus 2008 and HST 2008 versus JWST
Here we are looking for evidence of proper motion

#+begin_src sh :dir data/reproject :results verbatim
  python ../../scripts/compare-knot-seps.py wr124-hst-1997-f656n-radec wr124-hst-2008-f656n-radec --xyshift1 -0.03 0.0
#+end_src

#+RESULTS:
: Saved plot to wr124-hst-1997-f656n-radec-wr124-hst-2008-f656n-radec-knot-seps.pdf

- This shows weak evidence for a radial expansion of about 0.03 arcsec over 11 years.
  - Using a distance of 5.429 kpc, this is a linear velocity of
    : 4.74 mu / P = 4.74 (0.03 / 11) 5.429 1e3 = 70 km/s
    Checking ...
    : (0.03 / 11) 5.429 1e3 1.49597870691e13 / 3.15576e7 1.0e5 = 70. km/s 
- There is even a slight hint that it may grow linearly with radius
  - In this case, the 0.03 displacement is over 25 arcsec, so we can calculate a timescale
    : (25 / 0.03) 11 = 9167 years
#+begin_src sh :dir data/reproject :results verbatim 
  python ../../scripts/compare-knot-seps.py wr124-hst-2008-f656n-radec combo-E-ionized --xyshift1 -0.06 0.0
#+end_src

#+RESULTS:
: Saved plot to wr124-hst-2008-f656n-radec-combo-E-ionized-knot-seps.pdf
